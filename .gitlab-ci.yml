### Global CI/CD Settings ###

stages:
  - worker-build
  - worker-test
  - cron
  - website-test

variables:
  GIT_STRATEGY: clone
  REGISTRY: "https://code.ornl.gov:4567/rse/ornl.github.io"
  WORKER_URL: "${REGISTRY}/worker"

include:
  remote: "https://code.ornl.gov/rse-deployment/rse-sharables/-/raw/master/.gitlab-ci-before_script.yml"

after_script:
  - sudo chown -R gitlab-runner .

### CI/CD Jobs ###

#worker_build_job:
  #stage: worker-build
  #script:
    #- func_rse_docker_cleanup
    #- docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    #- docker build -f worker.Dockerfile -t $WORKER_URL/$CI_COMMIT_REF_NAME .
    #- docker push $WORKER_URL/$CI_COMMIT_REF_NAME
  #tags:
    #- rse-multi-builder
  #rules:
    #- changes:
      #- _explore/scripts/requirements.txt

#worker_test_job:
  #stage: worker-test
  #script:
    #- func_rse_docker_cleanup
    #- docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    #- docker pull $WORKER_URL/$CI_COMMIT_REF_NAME
    #- docker run --name ornl-software-catalog -v $PWD:/app bash -c "make test"
  #tags:
    #- rse-multi-builder
  #rules:
    #- changes:
      #- _explore/scripts/*.py

scheduled-data-update:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  stage:
    - cron
  tags:
    - software-catalog
  script:
    - ./_explore/scripts/cron.sh --docker

# NOTE: this job just tests that a feature branch with a MR out can still work on dev
pages:
  stage: website-test
  variables:
    # this image is based off of the "jekyll/builder" image from https://github.com/envygeeks/jekyll-docker
    # we use this image instead of pulling from Docker Hub, to avoid rate limits
    DOCKER_IMAGE: "code.ornl.gov:4567/rse/ornl.github.io/jekyll/builder:latest"
    DOCKER_WORKDIR: /srv/jekyll # default workdir of image, plus where we mount the repository to
    IMAGE_NAME: software-catalog-website
  script:
    - func_rse_docker_cleanup
    - docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $DOCKER_IMAGE
    - docker run -dit --name $IMAGE_NAME -v $PWD:$DOCKER_WORKDIR -e JEKYLL_ROOTLESS=true -e JEKYLL_ENV=production $DOCKER_IMAGE bash
    # update bundler to match Gemfile.lock "BUNDLED WITH" version
    - docker exec -i $IMAGE_NAME bash -c "gem install bundler:$(tail -1 Gemfile.lock | xargs) && jekyll build -d public"
  # for Gitlab Pages, you must have the built artifacts in the "public" directory
  artifacts:
    paths:
      - public
  tags:
    - rse-multi-builder
  rules:
    # test that the website can build on any feature/hotfix branch.
    - if: |
        $CI_PIPELINE_SOURCE == 'merge_request_event'
        && $CI_COMMIT_BRANCH != 'dev'
        && $CI_COMMIT_BRANCH != 'master'
        && $CI_COMMIT_BRANCH != 'main'
